stages:
  - build
  - release
  - deploy

variables:
  BUILD_PATH: dist
  DEPLOY_HOST: gailkirklandphotography.com

  ANALYTICS: "true"
  NODE_ENV: production
  SERVER_SIDE_RENDERING: "true"

.build: &build
  artifacts:
    expire_in: 1 day
    paths:
      - $BUILD_PATH
      - package.json
      - public
  cache: &build-cache
    paths:
      - $BUILD_PATH
      - node_modules
      - public
  script:
    - node --version
    - npm --version
    - npm prune --production=false
    - npm install
    - npm install --only=dev
    - npm list --depth=0
    - NODE_ENV= npm list --depth=0 --only=dev
    - npm run build
  stage: build
  tags:
    - docker-node

build:
  <<: *build
  except:
    - tags

build-tag:
  <<: *build
  cache:
    <<: *build-cache
    key: $CI_BUILD_STAGE/tags
  only:
    - tags

.release: &release
  before_script:
    - export VERSION=$(git log -1 --pretty=%B | xargs)
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  after_script:
    - docker push $CI_REGISTRY_IMAGE
    - docker-clean
  stage: release
  tags:
    - shell

release:
  <<: *release
  only:
    - tags
  script:
    - export VERSION=$(git log -1 --pretty=%B | xargs)
    - docker build -t $CI_REGISTRY_IMAGE:$VERSION .
    - docker tag $CI_REGISTRY_IMAGE:$VERSION $CI_REGISTRY_IMAGE

release-branch:
  <<: *release
  only:
    - branches
  except:
    - master
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME .

.deploy: &deploy
  environment:
    url: https://$HOSTNAME
  script:
    - envsubst < docker-compose.template.production.yml > deploy/docker-compose.production.yml
    - >-
      rsync
      --itemize-changes
      --times
      .env
      deploy/*
      docker-compose.template.*
      $DEPLOY_HOST:$DEPLOY_PATH
    - >-
      ssh
      $DEPLOY_HOST
      "cd $DEPLOY_PATH && '$SHELL' -s" <<-EOF
        if [ ! -e /etc/nginx/sites-enabled/$HOSTNAME.conf ]; then
          echo 'creating new environment'
          export HOSTNAME=$HOSTNAME &&
          export HOST_PORT=$(get-port) &&
          envsubst < docker-compose.template.yml > docker-compose.yml &&
          envsubst < site.bootstrap.template.conf | sudo tee /etc/nginx/sites-available/$HOSTNAME.conf &&
          sudo ln -s -fn /etc/nginx/sites-{available,enabled}/$HOSTNAME.conf &&
          sudo service nginx reload &&
          letsencrypt certonly --noninteractive --webroot --webroot-path /var/www/challenges --domain $HOSTNAME &&
          envsubst < site.template.conf | sudo tee /etc/nginx/sites-available/$HOSTNAME.conf &&
          sudo ln -s -fn /etc/nginx/sites-{available,enabled}/$HOSTNAME.conf &&
          sudo service nginx reload
        fi
        docker-compose pull &&
        docker-compose up -d &&
        docker-clean
      EOF
  stage: deploy
  tags:
    - shell

deploy:
  <<: *deploy
  environment:
    name: production
    # TODO: remove this line when custom variables are supported
    url: https://gailkirklandphotography.com
  before_script:
    - cp .env.production .env
  only:
    - tags
  variables:
    CONTAINER_TAG: latest
    DEPLOY_PATH: $CI_PROJECT_NAME
    HOSTNAME: $DEPLOY_HOST

deploy-branch:
  <<: *deploy
  environment:
    name: $CI_BUILD_REF_NAME
    # TODO: remove this line when custom variables are supported
    url: https://$CI_BUILD_REF_NAME.gailkirklandphotography.com
  before_script:
    - cp .env.qa .env
  only:
    - branches
  except:
    - master
  variables:
    CONTAINER_TAG: $CI_BUILD_REF_NAME
    DEPLOY_PATH: $CI_PROJECT_NAME-$CI_BUILD_REF_NAME
    HOSTNAME: $CI_BUILD_REF_NAME.$DEPLOY_HOST
