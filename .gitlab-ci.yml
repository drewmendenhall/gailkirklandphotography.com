stages:
  - build
  - release
  - deploy

variables:
  BUILD_PATH: dist
  NODE_ENV: production
  SERVER_SIDE_RENDERING: "true"

.build: &build
  artifacts:
    expire_in: 1 day
    paths:
      - $BUILD_PATH
      - package.json
      - public
  cache: &build-cache
    paths:
      - $BUILD_PATH
      - node_modules
      - public
  script:
    - node --version
    - npm --version
    - NODE_ENV= npm install
    - npm run build
  stage: build
  tags:
    - docker-node-8

build:
  <<: *build
  except:
    - tags

build-tag:
  <<: *build
  cache:
    <<: *build-cache
    key: $CI_COMMIT_STAGE-tags
  only:
    - tags

.release: &release
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  after_script:
    - docker push $CI_REGISTRY_IMAGE
    - docker system prune --force
  stage: release
  tags:
    - shell

release:
  <<: *release
  only:
    - master
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
release-branch:
  <<: *release
  only:
    - branches
  except:
    - master
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
release-tag:
  <<: *release
  only:
    - tags
  script:
    - export VERSION=$(git log -1 --pretty=%B | xargs)
    - docker build -t $CI_REGISTRY_IMAGE:$VERSION .
    - docker tag $CI_REGISTRY_IMAGE:$VERSION $CI_REGISTRY_IMAGE

.deploy: &deploy
  environment:
    on_stop: stop
    url: https://$HOSTNAME
  script:
    - export HOST_PORT=$(get-port)

    - envsubst < deploy/site.bootstrap.template.conf > /etc/nginx/sites-available/$HOSTNAME.conf
    - ln -s -fn ../sites-available/$HOSTNAME.conf /etc/nginx/sites-enabled/$HOSTNAME.conf
    - sudo nginx -s reload
    - sudo letsencrypt certonly --domain $HOSTNAME
    - envsubst < deploy/site.template.conf > /etc/nginx/sites-available/$HOSTNAME.conf
    - sudo nginx -s reload

    - mkdir -p ~/$DEPLOY_PATH
    - envsubst < .env.qa > ~/$DEPLOY_PATH/.env
    - envsubst < docker-compose.production.template.yml > ~/$DEPLOY_PATH/docker-compose.production.yml
    - envsubst < docker-compose.template.yml > ~/$DEPLOY_PATH/docker-compose.yml

    - cd ~/$DEPLOY_PATH
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose pull
    - docker-compose up -d
    - docker system prune --force
  stage: deploy
  tags:
    - www-server

deploy:
  <<: *deploy
  environment:
    name: production
    url: https://$DEPLOY_HOST
  before_script:
    - mkdir -p ~/$DEPLOY_PATH
    - envsubst < .env.production > ~/$DEPLOY_PATH/.env
  only:
    - master
  variables:
    CONTAINER_TAG: latest
    DEPLOY_PATH: $CI_PROJECT_NAME
    HOSTNAME: $DEPLOY_HOST

deploy-branch:
  <<: *deploy
  environment:
    name: $CI_COMMIT_REF_NAME
    url: https://$CI_COMMIT_REF_SLUG.$DEPLOY_HOST
  before_script:
    - mkdir -p ~/$DEPLOY_PATH
    - envsubst < .env.qa > ~/$DEPLOY_PATH/.env
  only:
    - branches
  except:
    - master
  variables:
    CONTAINER_TAG: $CI_COMMIT_REF_SLUG
    DEPLOY_PATH: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    HOSTNAME: $CI_COMMIT_REF_SLUG.$DEPLOY_HOST

stop:
  environment:
    action: stop
    name: $CI_COMMIT_REF_NAME
  except:
    - master
  script:
    - cd $DEPLOY_PATH
    - docker-compose down
    - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - cd ..
    - rm -rf $DEPLOY_PATH
    - rm /etc/nginx/sites-{available,enabled}/$HOSTNAME.conf
    - rm -rf /etc/letsencrypt/{archive,live,renewal}/$HOSTNAME*
    - sudo nginx -s reload
  stage: deploy
  tags:
    - www-server
  variables:
    DEPLOY_PATH: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    GIT_STRATEGY: none
    HOSTNAME: $CI_COMMIT_REF_SLUG.$DEPLOY_HOST
  when: manual
